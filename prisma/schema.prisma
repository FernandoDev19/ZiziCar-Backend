generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id          String       @id @default(uuid())
  username    String       @unique(map: "username") @db.VarChar(50)
  email       String?      @unique(map: "email") @db.VarChar(200)
  phone       String       @unique(map: "phone") @db.VarChar(20)
  password    String       @db.VarChar(199)
  provider_id String?      @db.VarChar(199)
  customer_id String?      @db.VarChar(199)
  employee_id String?      @db.VarChar(199)
  status      Boolean      @default(false)
  updated_at  DateTime?    @db.Timestamp(0)
  created_at  DateTime     @default(now()) @db.Timestamp(0)
  user_roles  user_roles[]
  customers   customers?   @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_customer_user")
  employees   employees?   @relation(fields: [employee_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_employee_user")
  providers   providers?   @relation(fields: [provider_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_provider_user")

  @@index([customer_id], map: "fk_customer_user")
  @@index([employee_id], map: "fk_employee_user")
  @@index([provider_id], map: "fk_provider_user")
}

model answers {
  id          String    @id @default(uuid())
  request_id  String    @db.VarChar(199)
  employee_id String    @db.VarChar(199)
  answer_type String    @db.VarChar(199)
  category    String?   @db.VarChar(200)
  quote_id    String?   @db.VarChar(199)
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  employees   employees @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_answer_employee")
  quotes      quotes?   @relation(fields: [quote_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_answer_quote")
  requests    requests  @relation(fields: [request_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_answer_request")

  @@index([employee_id], map: "fk_answer_employee")
  @@index([quote_id], map: "fk_answer_quote")
  @@index([request_id], map: "fk_answer_request")
}

model cities {
  id                                           Int            @id @default(autoincrement())
  name                                         String         @db.VarChar(150)
  state_id                                     Int
  states                                       states         @relation(fields: [state_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_state_city")
  headquarters                                 headquarters[]
  requests_requests_devolution_city_idTocities requests[]     @relation("requests_devolution_city_idTocities")
  requests_requests_entry_city_idTocities      requests[]     @relation("requests_entry_city_idTocities")

  @@index([state_id], map: "fk_state_city")
}

model continents {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(150)
  countries countries[]
}

model countries {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(150)
  prefix       Int
  continent_id Int
  continents   continents @relation(fields: [continent_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_continent_country")
  states       states[]

  @@index([continent_id], map: "fk_continent_country")
}

model customers {
  id                      String     @id @default(uuid())
  identification          String?    @db.VarChar(50)
  name                    String     @db.VarChar(150)
  credit_card_holder_name String?    @db.VarChar(180)
  gender                  String?    @db.VarChar(50)
  birthdate               DateTime?  @db.DateTime(0)
  country                 String?    @db.VarChar(100)
  city                    String?    @db.VarChar(100)
  address                 String?    @db.VarChar(100)
  updated_at              DateTime?  @db.Timestamp(0)
  created_at              DateTime   @default(now()) @db.Timestamp(0)
  requests                requests[]
  users                   users[]
}

model employees {
  id              String       @id @default(uuid())
  headquarters_id String       @db.VarChar(199)
  name            String       @db.VarChar(150)
  workstation     String?      @default("Vendedor") @db.VarChar(100)
  updated_at      DateTime?    @db.Timestamp(0)
  created_at      DateTime     @default(now()) @db.Timestamp(0)
  answers         answers[]
  headquarters    headquarters @relation(fields: [headquarters_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_employee_headquarter")
  users           users[]

  @@index([headquarters_id], map: "fk_employee_headquarter")
}

model gammas {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(150)
  image_url String     @db.VarChar(200)
  requests  requests[]
  vehicles  vehicles[]
}

model headquarters {
  id                                String               @id @default(uuid())
  provider_id                       String               @db.VarChar(199)
  city_id                           Int
  address                           String               @db.VarChar(60)
  cities_preferences                String?              @db.LongText
  percentage_of_rent                Int                  @default(0)
  allowed_payment_method_preference String               @db.VarChar(150)
  updated_at                        DateTime?            @db.Timestamp(0)
  created_at                        DateTime             @default(now()) @db.Timestamp(0)
  employees                         employees[]
  cities                            cities               @relation(fields: [city_id], references: [id], onUpdate: Restrict, map: "fk_city_headquarter")
  providers                         providers            @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_headquarter_provider")
  vehicles_providers                vehicles_providers[]

  @@index([city_id], map: "fk_city_headquarter")
  @@index([provider_id], map: "fk_headquarter_provider")
}

model providers {
  id                 String               @id @default(uuid())
  nit                String               @unique(map: "nit") @db.VarChar(50)
  company_name       String               @unique(map: "company_name") @db.VarChar(200)
  updated_at         DateTime?            @db.Timestamp(0)
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  headquarters       headquarters[]
  requests_providers requests_providers[]
  users              users[]
}

model quotes {
  id                                                 String             @id @default(uuid())
  rental_price                                       Int                @default(0)
  overtime_price                                     Int                @default(0)
  home_delivery_price                                Int                @default(0)
  home_collection_price                              Int                @default(0)
  price_for_return_or_collection_in_a_different_city Int                @default(0)
  total_value                                        Int                @default(0)
  allowed_payment_method                             String             @db.VarChar(100)
  vehicle_id                                         String             @db.VarChar(199)
  warranty                                           Int                @default(0)
  payment_method_allowed_for_guarantee               String             @db.VarChar(100)
  available_kilometers                               String             @default("Libre") @db.VarChar(50)
  percentage_of_rent                                 Int
  percentage_of_rent_in_values                       Int
  comments                                           String?            @db.Text
  created_at                                         DateTime           @default(now()) @db.Timestamp(0)
  answers                                            answers[]
  vehicles_providers                                 vehicles_providers @relation(fields: [vehicle_id], references: [id], onUpdate: Restrict, map: "fk_vehicle_quote")
  requests                                           requests[]

  @@index([vehicle_id], map: "fk_vehicle_quote")
}

model requests {
  id                                         String               @id @default(uuid())
  customer_id                                String               @db.VarChar(199)
  quote_id                                   String?              @db.VarChar(199)
  comments                                   String?              @default("No hay comentarios") @db.Text
  entry_city_id                              Int
  receive_at_airport                         Boolean              @default(false)
  devolution_city_id                         Int
  returns_at_airport                         Boolean              @default(false)
  entry_date                                 DateTime             @db.DateTime(0)
  entry_time                                 String               @db.VarChar(20)
  devolution_date                            DateTime             @db.DateTime(0)
  devolution_time                            String               @db.VarChar(20)
  gamma_id                                   Int
  transmission_id                            Int
  confirmed_payment                          Boolean              @default(false)
  created_at                                 DateTime             @default(now()) @db.Timestamp(0)
  answers                                    answers[]
  cities_requests_devolution_city_idTocities cities               @relation("requests_devolution_city_idTocities", fields: [devolution_city_id], references: [id], onUpdate: Restrict, map: "fk_devolution_city")
  cities_requests_entry_city_idTocities      cities               @relation("requests_entry_city_idTocities", fields: [entry_city_id], references: [id], onUpdate: Restrict, map: "fk_entry_city")
  gammas                                     gammas               @relation(fields: [gamma_id], references: [id], onUpdate: Restrict, map: "fk_gamma_request")
  quotes                                     quotes?              @relation(fields: [quote_id], references: [id], onUpdate: Restrict, map: "fk_quote_request")
  customers                                  customers            @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_request_customer")
  transmissions                              transmissions        @relation(fields: [transmission_id], references: [id], onUpdate: Restrict, map: "fk_transmission_request")
  requests_providers                         requests_providers[]

  @@index([devolution_city_id], map: "fk_devolution_city")
  @@index([entry_city_id], map: "fk_entry_city")
  @@index([quote_id], map: "fk_quote_request")
  @@index([customer_id], map: "fk_request_customer")
  @@index([gamma_id], map: "fk_gamma_request")
  @@index([transmission_id], map: "fk_transmission_request")
}

model requests_providers {
  id          Int       @id @default(autoincrement())
  request_id  String    @db.VarChar(199)
  provider_id String    @db.VarChar(199)
  sent_at     DateTime  @default(now()) @db.Timestamp(0)
  providers   providers @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_providers_requests")
  requests    requests  @relation(fields: [request_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_requests_providers")

  @@index([provider_id], map: "fk_providers_requests")
  @@index([request_id], map: "fk_requests_providers")
}

model roles {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(30)
  description String?      @db.Text
  user_roles  user_roles[]
}

model states {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(50)
  country_id Int
  cities     cities[]
  countries  countries @relation(fields: [country_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_country_state")

  @@index([country_id], map: "fk_country_state")
}

model transmissions {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(50)
  image_url          String               @db.VarChar(200)
  requests           requests[]
  vehicles_providers vehicles_providers[]
}

model user_roles {
  id      Int    @id @default(autoincrement())
  user_id String @db.VarChar(199)
  role_id Int
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "fk_role_user")
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_role")

  @@index([role_id], map: "fk_role_user")
  @@index([user_id], map: "fk_user_role")
}

model vehicles {
  id                 String               @id @default(uuid())
  name               String               @db.VarChar(120)
  gamma_id           Int
  gammas             gammas               @relation(fields: [gamma_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_gamma_vehicle")
  vehicles_providers vehicles_providers[]

  @@index([gamma_id], map: "fk_gamma_vehicle")
}

model vehicles_providers {
  id              String        @id @default(uuid())
  vehicle_id      String        @db.VarChar(199)
  headquarter_id  String        @db.VarChar(199)
  color           String        @db.VarChar(60)
  plate_end_in    String        @db.VarChar(20)
  transmission_id Int
  mileage         Int           @default(0)
  quotes          quotes[]
  headquarters    headquarters  @relation(fields: [headquarter_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_headquarter_vehicle")
  transmissions   transmissions @relation(fields: [transmission_id], references: [id], onUpdate: Restrict, map: "fk_transmission_vehicle")
  vehicles        vehicles      @relation(fields: [vehicle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_vehicle_headquarter")

  @@index([headquarter_id], map: "fk_headquarter_vehicle")
  @@index([vehicle_id], map: "fk_vehicle_headquarter")
  @@index([transmission_id], map: "fk_transmission_vehicle")
}

model news {
  id         Int      @id @default(autoincrement())
  image_url  String   @default("http") @db.VarChar(199)
  title      String   @db.VarChar(50)
  paragraph  String   @db.VarChar(110)
  status     Boolean  @default(true)
  start_date DateTime @db.DateTime(0)
  end_date   DateTime @db.DateTime(0)
  created_at DateTime @default(now()) @db.Timestamp(0)
}
